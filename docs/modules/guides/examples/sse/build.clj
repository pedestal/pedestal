(ns build
  (:refer-clojure :exclude [test])
  (:require [clojure.tools.build.api :as b]
            [clj-commons.ansi :refer [pcompose]]
            [deps-deploy.deps-deploy :as dd]))

(def lib 'org.example/sse)
(def version "0.1.0-SNAPSHOT")
;; alternatively, use MAJOR.MINOR.COMMITS:
#_ (def version (format "1.0.%s" (b/git-count-revs nil)))
(def class-dir "target/classes")

(defn test
  "Run all the tests."
  [opts]
  (let [basis    (b/create-basis {:aliases [:test]})
        cmds     (b/java-command
                  {:basis      basis
                    :main      'clojure.main
                    :main-args ["-m" "cognitect.test-runner"]})
        {:keys [exit]} (b/process cmds)]
    (when-not (zero? exit) (throw (ex-info "Tests failed" {}))))
  opts)

(defn- pom-template [version]
  [[:description "FIXME: generated by the io.pedestal/embedded template."]
   [:url "https://github.com/example/sse"]
   [:licenses
    [:license
     [:name "Eclipse Public License"]
     [:url "http://www.eclipse.org/legal/epl-v10.html"]]]
   [:developers
    [:developer
     [:name "Howard.lewisship"]]]
   [:scm
    [:url "https://github.com/example/sse"]
    [:connection "scm:git:https://github.com/example/sse.git"]
    [:developerConnection "scm:git:ssh:git@github.com:example/sse.git"]
    [:tag (str "v" version)]]])

(defn- jar-opts [opts]
  (assoc opts
          :lib           lib
          :version       version
          :jar-file      (format "target/%s-%s.jar" lib version)
          :basis         (b/create-basis {})
          :class-dir     class-dir
          :target        "target"
          :src-dirs      ["src"]
          :resource-dirs ["resources"]
          :pom-data      (pom-template version)))

(defn jar
  "Build a project JAR containing the source and resources."
  [opts]
  (b/delete {:path "target"})
  (let [opts'                                                (jar-opts opts)
        {target-dir :target
         :keys [class-dir src-dirs resource-dirs jar-files]} opts']
    (println "Writing pom.xml...")
    (b/write-pom opts')
    (println "Copying source...")
    (b/copy-dir {:src-dirs (into src-dirs resource-dirs)
                 :target-dir class-dir})
    (println "\nBuilding JAR" (:jar-file opts') "...")
    (b/jar opts')
    ;; Provide the jar options to the caller (the install or deploy commands)
    opts'))

(defn install
  "Install the project JAR to local Maven repository."
  [opts]
  (let [opts' (jar opts)]
    (println "Installing JAR to local Maven repository ...")
    (b/install opts'))
  opts)

(defn deploy
  "Build and deploy the project JAR to Clojars."
  [opts]
  (let [{:keys [jar-file] :as opts'} (jar opts)]
    (dd/deploy {:installer :remote :artifact (b/resolve-path jar-file)
                :pom-file (b/pom-path (select-keys opts' [:lib :class-dir]))}))
  opts)

(defn lint
  "Lint source files using clj-kondo."
  [opts]
  (let [lint-options (merge {:lint ["src" "test"]
                             :config
                             {:linters
                               {:unresolved-symbol
                                 {:exclude '[(clojure.test/is [match?])]}}}}
                             opts)
        kondo-run!   (requiring-resolve 'clj-kondo.core/run!)
        kondo-print! (requiring-resolve 'clj-kondo.core/print!)
        results      (kondo-run! lint-options)]
      (kondo-print! results)
      (when (pos? (get-in results [:summary :errors] 0))
        (pcompose [:red [:bold "ERROR"] ": clj-kondo found errors üò¢"])
        (System/exit -1))
      (pcompose [:bold.green "clj-kondo approves ‚ò∫Ô∏è"])))


